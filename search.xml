<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>半夜发癫，胡乱写了点东西</title>
      <link href="/2024/09/27/Life/1/"/>
      <url>/2024/09/27/Life/1/</url>
      
        <content type="html"><![CDATA[<p>夜半失眠，打开手机，随便写点什么。生活里到处都是焦虑，每时每刻，周围的每个角落。大学生活不尽如人意，固然自由，却不如高中那般。压抑，沉沦，自私，拥挤。</p><p>这个世界变态地发育，人与人互相内卷，冷漠，苦倦，苍白。所有人皆知这般苦难，所有人又都怕抛弃，所有人又都在被牵着鼻子，无力。一代一代，每一代人似乎更加勤奋，更加发达，更加完美。上限是什么？所有人近乎完人。未尝不是好事，可又不是好事。</p><p>最近的疲倦让我不禁感受生活的枯燥。上课，作业，睡觉。剩下的便是毫无意义地刷着手机，看着被人嚼烂的、没有丝毫营养的内容。除此以外，再无其他。</p><p>日子一天天过去，连失望都淡了。面对新事物，没有好奇，只有麻木。周围的人拼命追赶，目标明确，脚步却无从落定。曾经努力过，跟上过，直到某个时刻才明白，一切都是徒劳。上限被不断拔高，尽全力，也不过站在别人早已到达的地方。所有人都在进步，变得“完美”，只剩下疲惫。</p><p>那些能带来些许慰藉的事，如今也变得空洞。音乐、电影、聊天，全都失去了意义。只剩下刷着手机，填满无意义的时间。短暂的刺激之后，是更深的空虚。</p><p>有时会想，这样的生活到底是为了什么？日复一日，年复一年，最后得到的是什么？</p><p>我不知道，谁会知道哪一天生，哪一天灭，哪一天活着，哪一天死了。没有人知道，“以后有什么打算”，“走一步看一步吧”，大部分人都如此，失眠的夜不会立马睡着，睡着了又忘了失眠的痛，都是这样的</p>]]></content>
      
      
      <categories>
          
          <category> Life </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>oopLab02（问答报告</title>
      <link href="/2024/09/26/Homework/LAB02/Qz01(sample)/"/>
      <url>/2024/09/26/Homework/LAB02/Qz01(sample)/</url>
      
        <content type="html"><![CDATA[<h1 id="1-类的定义"><a href="#1-类的定义" class="headerlink" title="1.类的定义"></a>1.类的定义</h1><h2 id="Qz01-sample"><a href="#Qz01-sample" class="headerlink" title="Qz01(sample)"></a>Qz01(sample)</h2><p><strong>running res</strong></p><p><img src="https://s2.loli.net/2024/09/26/g5yYk8iAPwShs4C.png" alt="2024-09-26-19-23-41.png"></p><p><strong>ans</strong></p><ol><li>第四行，变量未初始化。java中的自动初始化只能应用与成员变量，不能应用于局部变量，故在运行时会提示第四行m未初始化。</li><li>x为成员变量，m为局部变量。自动初始化只能用于成员变量</li></ol><h1 id="2-函数重载"><a href="#2-函数重载" class="headerlink" title="2.函数重载"></a>2.函数重载</h1><h2 id="Qz02"><a href="#Qz02" class="headerlink" title="Qz02"></a>Qz02</h2><p><strong>ans</strong></p><ul><li>错误的叙述为：bd</li><li>b中非构造方法不能与类名重复，两个方法不能被称作非构造方法</li><li>d中<code>overload</code> 类有两个构造方法</li></ul><h1 id="3-初始化-Initialization"><a href="#3-初始化-Initialization" class="headerlink" title="3.初始化(Initialization)"></a>3.初始化(Initialization)</h1><h2 id="Qz03"><a href="#Qz03" class="headerlink" title="Qz03"></a>Qz03</h2><p><strong>running res</strong></p><p><img src="https://s2.loli.net/2024/09/26/VWZl5w1XIf2UogO.png" alt="2024-09-26-20-07-35.png"></p><h2 id="Qz04"><a href="#Qz04" class="headerlink" title="Qz04"></a>Qz04</h2><ol><li><h2 id="Qz05"><a href="#Qz05" class="headerlink" title="Qz05"></a>Qz05</h2></li></ol><h2 id="Qz06"><a href="#Qz06" class="headerlink" title="Qz06"></a>Qz06</h2><p><strong>ans</strong></p><h1 id="4-单例模式-Singleton-Pattern"><a href="#4-单例模式-Singleton-Pattern" class="headerlink" title="4.单例模式(Singleton Pattern)"></a>4.单例模式(Singleton Pattern)</h1><h2 id="Qz07"><a href="#Qz07" class="headerlink" title="Qz07"></a>Qz07</h2><p><strong>ans</strong></p><p>不可以，单例模式只有一个实例，并且是自己创建自己的实例，其他类只能用单例类已经创建提供的实例</p><h2 id="Qz08"><a href="#Qz08" class="headerlink" title="Qz08"></a>Qz08</h2><p><strong>ans</strong></p><p>该类的构造函数已经被设为私有，外部类无法调用构造方法创建实例。唯一的实例在单例类被加载时就已经被构造完成</p><h2 id="Qz09"><a href="#Qz09" class="headerlink" title="Qz09"></a>Qz09</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Extern</span>&#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] arrs)</span>&#123;</span><br><span class="line"> <span class="type">Singleton</span> <span class="variable">a</span> <span class="operator">=</span> Singleton.Singleton <span class="title function_">getInstance</span><span class="params">()</span>;</span><br><span class="line"> a.foo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5-编程题"><a href="#5-编程题" class="headerlink" title="5.编程题"></a>5.编程题</h1><h2 id="Qz10"><a href="#Qz10" class="headerlink" title="Qz10"></a>Qz10</h2><p><strong>running res</strong></p><p><img src="https://s2.loli.net/2024/09/26/sefubGOZIT9XkDP.png" alt="2024-09-26-21-09-07.png"></p><p><strong>Code</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"> String name;</span><br><span class="line"> <span class="type">int</span> age;</span><br><span class="line"> <span class="type">int</span> sex;<span class="comment">//0表示女性，1表示男性哦</span></span><br><span class="line"> <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name,<span class="type">int</span> age, <span class="type">int</span> sex)</span> &#123;</span><br><span class="line"> <span class="built_in">this</span>.name = name;</span><br><span class="line"> <span class="built_in">this</span>.age = age;</span><br><span class="line"> <span class="built_in">this</span>.sex=sex;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line"> <span class="built_in">this</span>.age = age;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line"> <span class="keyword">return</span> age;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">work</span><span class="params">()</span>&#123;</span><br><span class="line"> System.out.println(<span class="string">&quot;working&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showAge</span><span class="params">()</span>&#123;</span><br><span class="line"> System.out.println(age);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestPerson</span> &#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"> <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Lvs4nXN0thing&quot;</span>,<span class="number">18</span>,<span class="number">1</span>);</span><br><span class="line"> person.setAge(<span class="number">20</span>);</span><br><span class="line"> person.showAge();</span><br><span class="line"> <span class="type">Person</span> <span class="variable">person2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Lvs4nXN0thing&quot;</span>,<span class="number">20</span>,<span class="number">2</span>);</span><br><span class="line"> person2.setAge(<span class="number">18</span>);</span><br><span class="line"> person2.showAge();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="./Code/Qz10/TestPerson.java">code&#x2F;Qz10</a></p><h2 id="Qz11"><a href="#Qz11" class="headerlink" title="Qz11"></a>Qz11</h2><p><strong>running res</strong></p><p><img src="https://s2.loli.net/2024/09/26/sCvTwZaoxYGf9J8.png" alt="image.png"></p><p><strong>Code</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Qz11</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">noZeroBefo</span><span class="params">(String a)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(a.length() == <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> a.charAt(<span class="number">0</span>) != <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">backBack</span><span class="params">(String a)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> a.length();</span><br><span class="line">        <span class="type">int</span> i=<span class="number">0</span>,j=len-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;j)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a.charAt(i)==a.charAt(j))&#123;</span><br><span class="line">                i++;j--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> in.nextLine();</span><br><span class="line">        <span class="keyword">if</span>(noZeroBefo(a)==<span class="literal">true</span>)&#123;</span><br><span class="line">            System.out.println(a+<span class="string">&quot;是一个没有前导0的数&quot;</span>);&#123;</span><br><span class="line">                <span class="keyword">if</span>(backBack(a)==<span class="literal">true</span>)</span><br><span class="line">                    System.out.println(a+<span class="string">&quot;是回文数&quot;</span>);</span><br><span class="line">                <span class="keyword">else</span> System.out.println(a+<span class="string">&quot;不是回文数&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> System.out.println(a+<span class="string">&quot;不是一个没有前导0的数&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Homework </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>oopLab01（问答报告</title>
      <link href="/2024/09/24/Homework/Lab01/oopLab%2001%20%E9%97%AE%E7%AD%94%E6%8A%A5%E5%91%8A/"/>
      <url>/2024/09/24/Homework/Lab01/oopLab%2001%20%E9%97%AE%E7%AD%94%E6%8A%A5%E5%91%8A/</url>
      
        <content type="html"><![CDATA[<h2 id="Q1"><a href="#Q1" class="headerlink" title="Q1"></a>Q1</h2><p><strong>运行结果</strong></p><p><img src="C:\Users\11\AppData\Roaming\marktext\images\2024-09-21-15-36-46-image.png"></p><h2 id="Q2"><a href="#Q2" class="headerlink" title="Q2"></a>Q2</h2><p><strong>运行结果</strong></p><p><img src="C:\Users\11\AppData\Roaming\marktext\images\2024-09-21-15-51-47-image.png"></p><table><thead><tr><th>基本类型</th><th>默认值</th><th>基本类型</th><th>默认值</th></tr></thead><tbody><tr><td>byte</td><td>0</td><td>boolean</td><td>false</td></tr><tr><td>short</td><td>0</td><td>char</td><td>‘0’ (space)</td></tr><tr><td>int</td><td>0</td><td>float</td><td>0.0</td></tr><tr><td>long</td><td>0</td><td>double</td><td>0.0</td></tr></tbody></table><p><strong>执行代码</strong> </p><p><a href="./Code/Main.java">Main.java</a></p><h2 id="Q3"><a href="#Q3" class="headerlink" title="Q3"></a>Q3</h2><p><strong>运行结果</strong></p><p><img src="C:\Users\11\AppData\Roaming\marktext\images\2024-09-21-15-56-23-image.png"></p><p><strong>执行代码</strong></p><p><a href="./Code/FindMinMax.java">FindMinMax.java</a></p><h2 id="Q4-短路效应"><a href="#Q4-短路效应" class="headerlink" title="Q4(短路效应)"></a>Q4(短路效应)</h2><p><strong>运行结果</strong></p><p><img src="C:\Users\11\AppData\Roaming\marktext\images\2024-09-21-15-58-06-image.png"></p><p><strong>java执行串联逻辑运算时的流程</strong></p><blockquote><p>首先执行test0(0)，输出”1”，返回”true”</p><p>然后执行test1(2)，输出”2”，返回”false”</p><p>由于是&amp;&amp;，b已经可以确定是”false”，无需继续计算，故不会执行test3(2)</p><p>最后输出”b is false”</p></blockquote><p><strong>执行代码</strong></p><p><a href="./Code/ShortCircuit.java">ShortCircuit.java</a></p><h2 id="Q5-主类"><a href="#Q5-主类" class="headerlink" title="Q5(主类)"></a>Q5(主类)</h2><ol><li><p>源文件的名字是 Student</p></li><li><p>将生成两个文件，一个是Student.class，一个是Exam.class</p></li><li><p><img src="C:\Users\11\AppData\Roaming\marktext\images\2024-09-23-16-55-35-image.png"></p></li></ol><h2 id="Q6"><a href="#Q6" class="headerlink" title="Q6"></a>Q6</h2><p><strong>Running Res</strong></p><img src="file:///C:/Users/11/AppData/Roaming/marktext/images/2024-09-21-16-24-57-image.png" title="" alt="" width="139"><p><strong>Code</strong></p><p><a href="./Code/TwoDimensionArray.java">TwoDimensionArray</a> </p><h2 id="Q7"><a href="#Q7" class="headerlink" title="Q7"></a>Q7</h2><p><strong>Running Res</strong></p><p><img src="C:\Users\11\AppData\Roaming\marktext\images\2024-09-21-19-58-09-image.png"></p><p><strong>Reason</strong></p><blockquote><p>当<code>i==1</code>时，执行<code>case 1</code>，输出<code>&#39;J&#39;</code></p><p>由于<code>case 1</code>中无<code>break</code>，程序继续执行<code>case 2</code>，输出<code>&#39;e&#39;</code>，<code>break</code>进行下一次循环</p><p>当<code>i==2</code>时，执行<code>case 2</code>，输出<code>&#39;e&#39;</code>，<code>break</code>进行下一次循环</p><p>当<code>i==3</code>时，执行<code>case 3</code>，输出<code>&#39;p&#39;</code>，同理无<code>break</code>，输出<code>&quot;好&quot;</code></p><p>当<code>i==4</code>时，执行<code>default</code>，输出<code>&quot;好&quot;</code></p></blockquote><h2 id="Q8"><a href="#Q8" class="headerlink" title="Q8"></a>Q8</h2><p><strong>Running Res</strong></p><p><img src="C:\Users\11\AppData\Roaming\marktext\images\2024-09-21-16-27-33-image.png"></p><p><strong>Code</strong></p><p><a href="./Code/SquarePrint.java">SquarePrint.java</a> </p><h2 id="Q9"><a href="#Q9" class="headerlink" title="Q9"></a>Q9</h2><p><strong>Code</strong></p><p> <a href="./Code/QSort.java">QSort.java</a></p><h2 id="Q10-深拷贝与浅拷贝"><a href="#Q10-深拷贝与浅拷贝" class="headerlink" title="Q10(深拷贝与浅拷贝)"></a>Q10(深拷贝与浅拷贝)</h2><p><strong>Running Res</strong></p><p><img src="C:\Users\11\AppData\Roaming\marktext\images\2024-09-23-16-31-24-image.png"></p><p><strong>Reason</strong></p><ol><li><p><strong>浅拷贝</strong>：拷贝对象时，只复制对象的<strong>引用</strong>，而不复制引用的对象本身。也就是说，原对象和拷贝对象的某些属性仍然指向同一内存地址。这意味着修改其中一个对象的内容，另一个对象的内容也可能被影响。在 Java 中，浅拷贝可以通过 <code>clone()</code> 方法实现。</p><p><strong>深拷贝</strong>：拷贝对象时，不仅复制对象本身，还会递归地复制它引用的所有对象，即每个层次的对象都创建全新的副本。这保证了拷贝对象和原对象完全独立，互不影响。深拷贝通常需要手动实现，比如通过实现 <code>Serializable</code> 接口后使用序列化和反序列化来创建对象的深拷贝，或者手动编写复制逻辑。</p></li><li><p>编写一个复制构造函数，逐一复制类中的属性，确保所有对象属性都被重新创建。</p></li><li><p><strong><code>==</code><strong>：<br><code>==</code> 比较的是两个对象的</strong>内存地址</strong>，也就是说它判断的是两个引用是否指向同一个内存位置。在 <code>String</code> 中，如果两个字符串使用 <code>new</code> 关键字创建，它们虽然内容相同，但引用不同，因此 <code>==</code> 会返回 <code>false</code>。但是，如果两个字符串是通过字面量创建，并且内容相同，Java 会将它们保存在常量池中，<code>==</code> 比较时可能会返回 <code>true</code>，因为它们指向同一个常量池中的内存地址。</p><p><strong><code>equals()</code><strong>：<br><code>equals()</code> 是 <code>String</code> 类重写的一个方法，它比较的是字符串的</strong>内容</strong>是否相同。因此，无论字符串的引用是否相同，只要内容一致，<code>equals()</code> 都会返回 <code>true</code>。</p></li></ol><h2 id="Q11"><a href="#Q11" class="headerlink" title="Q11"></a>Q11</h2><p><strong>Running Res</strong></p><p><img src="C:\Users\11\AppData\Roaming\marktext\images\2024-09-21-19-33-30-image.png"></p><p><img src="C:\Users\11\AppData\Roaming\marktext\images\2024-09-21-19-34-22-image.png"></p><p><strong>Code</strong></p><p><a href="./Code/Qz11.java">Qz11.java</a></p><h2 id="Q12-大数BigInt"><a href="#Q12-大数BigInt" class="headerlink" title="Q12(大数BigInt)"></a>Q12(大数BigInt)</h2><p><strong>Running Res</strong></p><p><img src="C:\Users\11\AppData\Roaming\marktext\images\2024-09-21-19-36-15-image.png"></p><p><img src="C:\Users\11\AppData\Roaming\marktext\images\2024-09-21-19-37-21-image.png"></p><p><strong>Code</strong></p><p><a href="./Code/BigNumberAddition.java">BigNumberAddition.java</a></p><h2 id="Q13"><a href="#Q13" class="headerlink" title="Q13"></a>Q13</h2><p><strong>Code</strong></p><p>Qz13.java</p>]]></content>
      
      
      <categories>
          
          <category> Homework </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
